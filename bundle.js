!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=1)}([function(t,e,n){"use strict";(function(t){e.DATABASE_URL=t.env.DATABASE_URL||"mongodb://tripuser:Paswword1@ds251112.mlab.com:51112/trips",e.TEST_DATABASE_URL=t.env.TEST_DATABASE_URL||"mongodb://localhost/test-trip",e.PORT=t.env.PORT||8080,e.serverBase="https://mighty-wildwood-62473.herokuapp.com/"}).call(this,n(4))},function(t,e,n){t.exports=n(2)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.selectedId=void 0,e.convertDateIntoMongoDB=w,e.convertDateFromMongoDB=h,e.showPlaces=D;var o,i=n(3),a=e.selectedId=void 0,r=n(0).serverBase+p()+"/trip-list",c='<li class="js-trip-item">\n      <div class="trip-title">\n        <p><span class="trip-item-name js-trip-item-name"></span></p>\n        <p><span class="trip-item-location js-trip-item-location"></span></p>\n        <p><span class="trip-item-dates js-trip-item-dates"></span></p>\n      </div>\n\n      <div class="trip-controls">\n\n\n        <button title="View comments" class="trip-item-view js-trip-item-view">\n          <img src="img/view.png" />\n        </button>\n\n        <button  title="Add place" class="trip-item-add">\n          <img src="img/add.png" />\n        </button>\n\n        <button  title="Edit" class="trip-item-edit js-trip-item-edit">\n          <img src="img/edit.png" />\n        </button>\n\n        <button  title="Delete" class="trip-item-delete js-trip-item-delete">\n          <img src="img/delete.png" />\n        </button>\n\n      <div>\n     \n    </li>';function p(){var t=window.location.search.split("=");return $.getJSON(r,function(t){0!==t.length?y(t[0].location):($(".popup-overlay-new-trip, .popup-content-new-trip").addClass("active"),$(".box-parent").addClass("inactive"))}),t[1],t[1]}function l(){console.log("Retrieving trip list"),$.getJSON(r,function(t){console.log("Rendering trip list"),console.log(t);var e=t.map(function(t){console.log(t);var e=$(c);e.attr("id",t.id),e.find(".js-trip-item-name").text(t.name),e.find(".js-trip-item-location").text(t.location);var n=e.find(".js-trip-item-dates"),o=h(t.tripDates);return n.text(o),e});$(".js-trip-list").html(e)})}function s(t){$.ajax({method:"POST",url:r,data:JSON.stringify(t),success:function(){l()},dataType:"json",contentType:"application/json"}).then(function(){console.log("Adding trip: "+t),l(),y(t.location),$.getJSON(r,function(t){e.selectedId=a=t[0].id}),$(".popup-overlay-new-trip, .popup-content-new-trip").removeClass("active"),$(".box-parent").removeClass("inactive"),$("#js-new-name").val(""),$("#js-new-location").val(""),$("#js-new-textArea").val(""),$("#js-new-dates").val("")}).then(function(){$(".popup-overlay-view-addPlaceForm, .popup-content-view-addPlaceForm").addClass("active"),$(".box-parent").addClass("inactive"),$(".popup-content-view-addPlaceForm").html('        \n    <h3>Please, add place you have visited </h3>\n    <div class="addPlaceForm-controls">\n  \n    <button class="button js-trip-item-addPlace">\n      Add\n    </button>\n  \n    <button class="button js-trip-item-skipAddTrip">\n       Skip\n    </button>\n  \n  <div>\n')})}function u(){$("#js-trip-item-add").on("click",function(){$(".popup-overlay-new-trip, .popup-content-new-trip").addClass("active"),$(".box-parent").addClass("inactive")}),$("#js-add-trip-form").submit(function(t){t.preventDefault();var e=function(t){return{name:$(t.currentTarget).find("#js-new-name").val(),location:$(t.currentTarget).find("#js-new-location").val(),content:$(t.currentTarget).find("#js-new-textArea").val(),tripDates:$(t.currentTarget).find("#js-new-dates").val()}}(t);e.tripDates=w(e.tripDates),s(e)})}function d(){$("main").on("click",".js-trip-item-delete",function(t){t.preventDefault(),function(t){console.log("Deleting trip `"+t+"`"),$.ajax({url:r+"/"+t,method:"DELETE",success:l})}($(t.currentTarget).closest(".js-trip-item").attr("id"))}),$.getJSON(r,function(t){0!==t.length&&y(t[0].location)})}function v(){$(".popup-content-add-place").html('        \n  <form id="js-add-place-form">\n  <label for="js-add-place-form"><span> <h4>Please add place you have visited in '+o+' </h4> </span></label>\n  <input type="text" name="js-trip-place-name" id="js-place-name" placeholder="Golden Gate Bridge, San Francisco ...." required><br>\n  \n  <button type="submit" class="button" id="addPlace">\n    Add\n  </button>\n  \n  <button class="button js-trip-addPlace-close">\n    Cancel\n  </button>\n\n  </form>\n')}console.log("USERID: ",p());var f=function(t){return function(e){var n=e.data.results[0].geometry.location.lat,o=e.data.results[0].geometry.location.lng,c={name:t,lat:n,lng:o};$.ajax({method:"POST",url:r+"/"+a+"/places",data:JSON.stringify(c),success:function(){l()},dataType:"json",contentType:"application/json"}),(0,i.displayPlaceOnMap)(c),$(".popup-overlay-add-place, .popup-content-add-place").removeClass("active"),$(".popup-overlay-view-oneMorePlace, .popup-content-view-oneMorePlace").addClass("active"),$(".popup-content-view-oneMorePlace").html('        \n    <div id="js-add-oneMorePlace">\n\n    <h2>Add one more place?</h2>\n    \n    <button type="submit" class= "button" id="addOneMorePlace">\n      Yes\n    </button>\n    \n    <button class="button js-trip-addOneMorePlace-cancel">\n      No\n    </button>\n\n    </div>\n    ')}};function m(){$("main").on("click",".js-trip-item-view",function(t){t.preventDefault(),$(".popup-overlay-view-fullTrip, .popup-content-view-fullTrip").addClass("active"),$(".box-parent").addClass("inactive");var e=$(t.currentTarget).closest(".js-trip-item");$.getJSON(r,function(t){!function(t){$(".popup-content-view-fullTrip").html('        \n  <div id="full-trip-view">\n    <p><span class="trip-item js-full-trip-content"></span>'+t.content+'</p>\n  </div>\n  <div class="full-trip-controls">\n  <button class="button js-trip-item-editcontent">\n    Edit\n  </button>\n  <button class="button js-trip-item-close">\n    Cancel\n  </button>\n<div>\n')}(t.find(function(t){return t.id===e.attr("id")}))})})}function g(){$("main").on("click",".js-trip-item-editcontent",function(t){t.preventDefault(),$.getJSON(r,function(t){var e=t.find(function(t){return t.id===a});!function(t){$("#js-upd-content-form").find("#js-upd-textArea").val(t.content),$(".popup-overlay-view-fullTrip, .popup-content-view-fullTrip").removeClass("active"),$(".popup-overlay-view-content, .popup-content-view-content").addClass("active"),$(".box-parent").addClass("inactive")}(e),function(t){$("#js-upd-content-form").on("click","#updatecontent",function(e){e.preventDefault();var n={id:t.id,name:t.name,location:t.location,content:$("#js-upd-content-form").find("textarea").val(),tripDates:t.tripdates};console.log(r+"/"+n.id),console.log("Updating trip item `"+n.id+"`"),console.log(n),a===n.id&&(b(n),$(".popup-overlay-view-content, .popup-content-view-content").removeClass("active"),$(".box-parent").removeClass("inactive"))})}(e)})})}function j(){$("main").on("click",".js-trip-item-edit",function(t){t.preventDefault(),$.getJSON(r,function(t){!function(t){$("#js-upd-trip-form").find("#js-upd-name").val(t.name),$("#js-upd-trip-form").find("#js-upd-location").val(t.location),$("#js-upd-trip-form").find("#js-upd-textArea").val(t.content);var e=h(t.tripDates);$("#js-upd-trip-form").find("#js-upd-dates").val(e),$(".popup-overlay-upd-trip, .popup-content-upd-trip").addClass("active"),$(".box-parent").addClass("inactive")}(t.find(function(t){return t.id===a}))}),function(t){$("#js-upd-trip-form").on("click","#updatetrip",function(e){e.preventDefault();var n={id:t,name:$("#js-upd-trip-form").find('input[name="js-upd-trip-form-name"]').val(),location:$("#js-upd-trip-form").find('input[name="js-upd-trip-form-location"]').val(),tripDates:$("#js-upd-trip-form").find('input[name="js-upd-trip-form-dates"]').val()};console.log(n.content);var o=n.tripDates;n.tripDates=w(o),console.log(r+"/"+n.id),console.log("Updating trip item `"+n.id+"`"),a===n.id&&b(n)})}(a)})}function b(t){$.ajax({url:r+"/"+t.id,method:"PUT",data:JSON.stringify(t),success:function(t){l()},dataType:"json",contentType:"application/json"}).then(function(){$(".popup-overlay-upd-trip, .popup-content-upd-trip").removeClass("active"),$(".box-parent").removeClass("inactive"),$("#js-upd-name").val(""),$("#js-upd-location").val(""),$("#js-upd-textArea").val(""),$("#js-upd-dates").val("")}).then(function(){console.log("Updating trip list: "+t),l();var e=t.tripDates.startDate+"/"+t.tripDates.endDate;t.tripDates=h(e)})}function y(t){axios.get("https://maps.googleapis.com/maps/api/geocode/json",{params:{address:t,key:"AIzaSyBpvjt5zBq23Wu6eZHvVuAHEjxd1GgDbMg"}}).then(function(t){(0,i.geocodeAddress)(t)}).catch(function(t){console.log(t)})}function w(t){var e=t.split("-"),n=new Date(e[0]),o=new Date(e[1]),i={startDate:{type:Date,required:!0},endDate:{type:Date,required:!0}};return i.startDate=n,i.endDate=o,i}function h(t){var e=t.split("/"),n=new Date(e[0]),o=new Date(e[1]);return n.getMonth()+1+"/"+n.getDate()+"/"+n.getFullYear()+" - "+(o.getMonth()+1+"/"+o.getDate()+"/"+o.getFullYear())}function D(t){$.getJSON(r,function(e){for(var n=e.find(function(e){return e.id===t}),o=0;o<n.places.length;o++)(0,i.displayPlaceOnMap)(n.places[o])})}window.saveAndRenderMarker=f,window.initMap=i.initMap,$(function(){l(),d(),function(){var t;$("main").on("click",".trip-title",function(n){n.preventDefault();var i=$(n.currentTarget).closest(".js-trip-item");if(e.selectedId=a=i.attr("id"),D(a),t)t!==r&&(t.find(".trip-controls").removeClass("active"),r=$(n.currentTarget).closest(".js-trip-item"),o=r.find(".js-trip-item-location").text(),r.find(".trip-controls").addClass("active"),y(o),t=r);else{var r=$(n.currentTarget).closest(".js-trip-item");o=r.find(".js-trip-item-location").text(),r.find(".trip-controls").addClass("active"),y(o),t=r}})}(),u(),j(),$("main").on("click",".js-trip-item-addPlace, .trip-item-add",function(t){t.preventDefault(),$(".popup-overlay-view-addPlaceForm, .popup-content-view-addPlaceForm").removeClass("active"),$(".popup-overlay-add-place, .popup-content-add-place").addClass("active"),$(".box-parent").addClass("inactive"),v()}),m(),$("main").on("click",".js-trip-item-close",function(t){t.preventDefault(),$(".popup-overlay-view-fullTrip, .popup-content-view-fullTrip").removeClass("active"),$(".box-parent").removeClass("inactive")}),$("main").on("click",".js-trip-upd-close",function(t){t.preventDefault(),$(".popup-overlay-view-content, .popup-content-view-content").removeClass("active"),$(".popup-overlay-upd-trip, .popup-content-upd-trip").removeClass("active"),$(".box-parent").removeClass("inactive")}),$("main").on("click",".js-trip-addPlace-close",function(t){t.preventDefault(),$(".popup-overlay-add-place, .popup-content-add-place").removeClass("active"),$(".box-parent").removeClass("inactive")}),$("main").on("click","#addPlace",function(t){t.preventDefault();var e=$("#js-add-place-form").find('input[name="js-trip-place-name"]').val();(0,i.getCoordsOfPlace)(e).then(f(e)).catch(function(t){console.log(t)})}),$("main").on("click",".js-trip-item-skipAddTrip",function(t){$(".popup-overlay-view-addPlaceForm, .popup-content-view-addPlaceForm").removeClass("active"),$(".box-parent").removeClass("inactive")}),$("main").on("click","#addOneMorePlace",function(t){t.preventDefault(),$(".popup-overlay-view-oneMorePlace, .popup-content-view-oneMorePlace").removeClass("active"),$(".popup-overlay-add-place, .popup-content-add-place").addClass("active"),$("#js-place-name").val("")}),v(),$("main").on("click",".js-trip-addOneMorePlace-cancel",function(t){t.preventDefault(),$(".popup-overlay-view-oneMorePlace, .popup-content-view-oneMorePlace").removeClass("active"),$(".box-parent").removeClass("inactive")}),g(),$("main").on("click",".canceltrip",function(t){t.preventDefault(),$(".popup-overlay-new-trip, .popup-content-new-trip").removeClass("active"),$(".box-parent").removeClass("inactive")})})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initMap=function(){var t;$.getJSON(o,function(e){t=e[0],console.log(t.location)}).then(function(t){console.log(t[0].location),axios.get("https://maps.googleapis.com/maps/api/geocode/json",{params:{address:t[0].location,key:"AIzaSyBpvjt5zBq23Wu6eZHvVuAHEjxd1GgDbMg"}}).then(function(t){a(t)}).catch(function(t){console.log(t)})})},e.geocodeAddress=a,e.getCoordsOfPlace=function(t){return axios.get("https://maps.googleapis.com/maps/api/geocode/json",{params:{address:t,key:"AIzaSyBpvjt5zBq23Wu6eZHvVuAHEjxd1GgDbMg"}})},e.displayPlaceOnMap=function(t){new google.maps.Marker({position:{lat:Number(t.lat),lng:Number(t.lng)},map:i,icon:"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"})};var o=n(0).serverBase+"trip-list";var i=e.map=void 0;function a(t){console.log(t);var n=t.data.results[0].formatted_address,o=t.data.results[0].geometry.location.lat,a=t.data.results[0].geometry.location.lng;console.log(o),console.log(a),console.log(n),e.map=i=new google.maps.Map(document.getElementById("map"),{center:{lat:Number(o),lng:Number(a)},zoom:12})}},function(t,e){var n,o,i=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function c(t){if(n===setTimeout)return setTimeout(t,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(t){n=a}try{o="function"==typeof clearTimeout?clearTimeout:r}catch(t){o=r}}();var p,l=[],s=!1,u=-1;function d(){s&&p&&(s=!1,p.length?l=p.concat(l):u=-1,l.length&&v())}function v(){if(!s){var t=c(d);s=!0;for(var e=l.length;e;){for(p=l,l=[];++u<e;)p&&p[u].run();u=-1,e=l.length}p=null,s=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===r||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(t)}}function f(t,e){this.fun=t,this.array=e}function m(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new f(t,e)),1!==l.length||s||c(v)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,